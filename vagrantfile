# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Change this to the name of the OpenVINO toolkit downloaded from Intel that you placed in the resources sub-directory
# Tested with l_openvino_toolkit_p_2019.1.144.tgz
# If this changes don't forget up update the openVINO_archive and openVINO_version variables in the provision/playbook.yml file
$openVNIO_file = "l_openvino_toolkit_p_2019.1.144.tgz"

# Change these variables to control CPU and Memory sizing
CPUS = 2
MEMORY = 3072

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # shared networking configuration
  network_configs = lambda do |network|
    # Port forward for RDP
    network.vm.network "forwarded_port", guest: 3389, host: 8389
  end

  config.vm.provider :virtualbox do |_, override|
    config.vm.box = "ubuntu/xenial64"
    config.vm.box_version = "20190617.0.0"
    config.vm.provider "virtualbox" do |v|
      # These lines configure the USB forwarding into the VM for the NCS
      # Depreciated due to licensing issues with the virtualbox extension pack
      # v.customize ["modifyvm", :id, "--usbxhci", "on"]
      # v.customize ["usbfilter", "add", "0",  "--target", :id, "--name", "Intel NCS 1", "--active", "yes", "--vendorid", "03e7"]
      # v.customize ["usbfilter", "add", "1",  "--target", :id, "--name", "Intel NCS 2", "--active", "yes", "--vendorid", "040e"]
      # Set memory and vCPU
      v.memory = MEMORY
      v.cpus = CPUS
    end
    network_configs.call override
  end

  config.vm.provider :parallels do |_, override|
    config.vm.box = "parallels/ubuntu-16.04"
    config.vm.box_version = "2.0.5"
    config.vm.provider "parallels" do |prl|
      prl.memory = MEMORY
      prl.cpus = CPUS
    end
    network_configs.call override
  end

  config.vm.provider :hyperv do |_, override|
    config.vm.box = "generic/ubuntu1604"
    config.vm.box_version = "1.9.16"
    config.vm.network "public_network"
    config.vm.provider "hyperv" do |hpv|
      hpv.memory = MEMORY
      hpv.cpus = CPUS
      hpv.enable_virtualization_extensions = true 
      hpv.differencing_disk = true
    end
    network_configs.call override
  end

  # Copy setup files into the VM
  config.vm.provision "file", source: "resources/" << $openVNIO_file, destination: "$HOME/intel_open_vino/" << $openVNIO_file
  config.vm.provision "file", source: "resources/silent_install.txt", destination: "$HOME/intel_open_vino/silent_install.txt"
  config.vm.provision "file", source: "resources/startwm.sh", destination: "$HOME/startwm.sh"
  config.vm.provision "file", source: "resources/km-0809.ini", destination: "$HOME/km-0809.ini"
  # Run the Ansible playbook to provision everything
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "provision/playbook.yml"
  end

end